Авторизация
-----------

Сесии
~~~~~

В отличие от традиционных решений в данном фреймворке сессии являются частным случаем авторизации, так как в большинстве случаев сессии используются для авторизации пользователей, то такой подход оказался оправданным.

В зависимости от значение параметра +$config[\'QFW'][\'cacheSessions']+ сессионные данные сохраняются в стандартном хранилище сессий или в кеше, указанном по умолчанию, ключами являются строки +sess_<id сессии>+, пустые сессии автоматически удаляются из хранилища и с помощью механизма очистки сессий также производится чистка кеша.

Для того чтобы стартовать сессию не привязывая ее к конкретному пользователю нужно прямо или косвенно наследовать контроллер от класса +QuickFW_Auth+ и для старта сессии вызвать +$this->session()+ После ее вызова с сессями можно работать через стандартный механизм - массив +$_SESSION+. Для уничтожения сессии нужно вызвать +$this->sessionDestroy()+, а для создания сесии с новым sessionID +$this->sessionRestart()+.

При наличие у пользователя сессионной куки сессия автоматически поднимается при вызове конструктора класса +QuickFW_Auth+.

Логин пользователя
~~~~~~~~~~~~~~~~~~

Если сессия не поднята или в массиве +$_SESSION+ нету ключа с именем, совпадающем с первым параметром конструктора, то вызывается функция +checkUser()+, которая может быть перегружена в наследуемом классе - если функция возвращает +false+, то авторизация не проходит, иначе возвращаемое значение заносится в +$_SESSION[\'<name>']+.

Конструктор класса +QuickFW_Auth+ принимает до двух параметров и возвращает флаг:

[source,php]
---------------------------------------------
/**
 * Инициализация пользователя - авторизация или восстановление сесии
 *
 * @param string $name ключ в $_SESSION для хранения данных авторизации
 * @param boolean|string $redir адрес редиректа при неудачном логине
 * @return boolean авторизован пользователь или нет
 */
public function __construct($name='user', $redir=false)
---------------------------------------------

Стандартная функция +checkUser()+ подходит для авторизации в админке - проверяет совпадение логина и пароля со значениями в конфиге (+$config[\'admin'][\'login']+ и +$config[\'admin'][\'passw']+). Если функция +checkUser()+ вернет массив в ключем +redirect+ то после логина произойдет переход на указанный адрес или на себя в случае +true+.

Авторизация через OpenID
^^^^^^^^^^^^^^^^^^^^^^^^

В разработке контроллер для авторизации через OpenID - OidController - после работы в сесии данные и редиректит на указанный адрес или сам на себя - функция, генерирующая форму может быть блоком - либо присутствует $_SESSION[\'openID'][\'error'], либо $_SESSION[\'openID'][\'id'] и $_SESSION[\'openID'][\'sreg'].
